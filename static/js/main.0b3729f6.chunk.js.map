{"version":3,"sources":["components/hasSelected.js","components/Leaf.jsx","components/Tree.jsx","App.js","serviceWorker.js","index.js"],"names":["hasSelected","permisos","Object","keys","reduce","value","current","Leaf","_ref","tree","root","onClick","react_default","a","createElement","className","style","border","defineProperty","SubTree","expanded","setExpanded","handleClick","subTree","key","newTree","objectSpread","marginLeft","display","flexDirection","map","Tree_RecursiveCheckboxTree","checked","RecursiveCheckboxTree","_ref4","isExpanded","_useState","useState","_useState2","slicedToArray","components_Leaf","Tree_SubTree","TREE","one","one_one","one_two","two","three","three_one","three_one_one","three_one_two","App","setTree","Tree","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b3729f6.chunk.js","sourcesContent":["export const hasSelected = (permisos) => {\n\tif (typeof permisos === 'boolean') {\n\t\treturn permisos;\n\t}\n\tconst keys = Object.keys(permisos);\n\treturn keys.reduce(\n\t\t(value, current) => value || hasSelected(permisos[current]),\n\t\tfalse\n\t);\n};\n","import React from 'react';\n\nconst Leaf = ({tree, root, onClick}) => (\n  <div>\n    <label\n      className=\"button\"\n      style={{border: 'none'}}\n      onClick={() => onClick({[root]: !tree[root]})}>\n      <span className={'icon has-text-' + (tree[root] ? 'success' : 'danger')}>\n        <i className={'fas fa-' + (tree[root] ? 'check' : 'times')} />\n      </span>\n      <span>{root}</span>\n    </label>\n  </div>\n);\n\nexport default Leaf;\n","import React, {useState} from 'react';\nimport {hasSelected} from './hasSelected';\nimport Leaf from './Leaf';\n\nconst SubTree = ({tree, onClick, expanded, setExpanded, root}) => {\n  const keys = Object.keys(tree[root]);\n  const handleClick = (subTree, key) => {\n    let newTree = {...tree};\n    newTree[root] = {...tree[root], ...subTree};\n    onClick({...newTree});\n  };\n  return (\n    <div>\n      <label\n        className=\"button\"\n        onClick={() => setExpanded(!expanded)}\n        style={{border: 'none'}}>\n        <span\n          className={'icon ' + (hasSelected(tree) ? '' : 'has-text-danger')}>\n          <i className={'fas fa-chevron-' + (expanded ? 'down' : 'right')} />\n        </span>\n        <span>{root}</span>\n      </label>\n      {expanded && (\n        <div\n          style={{\n            marginLeft: '1.5em',\n            display: 'flex',\n            flexDirection: 'column',\n          }}>\n          {keys &&\n            keys.map(key => (\n              <RecursiveCheckboxTree\n                checked={{[key]: tree[root][key]}}\n                tree={{[key]: tree[root][key]}}\n                onClick={subTree => handleClick(subTree, key)}\n              />\n            ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst RecursiveCheckboxTree = ({tree, onClick, isExpanded}) => {\n  const [expanded, setExpanded] = useState(isExpanded || false);\n  const root = Object.keys(tree)[0];\n  if (typeof tree[root] === 'boolean') {\n    return <Leaf tree={tree} root={root} onClick={onClick} />;\n  }\n  return (\n    <SubTree\n      tree={tree}\n      onClick={onClick}\n      expanded={expanded}\n      setExpanded={setExpanded}\n      root={root}\n    />\n  );\n};\n\nexport default RecursiveCheckboxTree;\n","import React, {useState} from 'react';\nimport Tree from './components/Tree';\n\nconst TREE = {\n  tree: {\n    one: {\n      one_one: true,\n      one_two: false,\n    },\n    two: true,\n    three: {\n      three_one: {\n        three_one_one: true,\n        three_one_two: false,\n      },\n    },\n  },\n};\n\nconst App = () => {\n  const [tree, setTree] = useState(TREE);\n  return <Tree tree={tree} onClick={setTree} />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}